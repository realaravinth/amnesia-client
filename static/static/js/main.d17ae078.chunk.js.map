{"version":3,"sources":["logo.svg","components/buttons/button.js","components/buttons/roundButton.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","button","props","show","className","onSubmit","submit","id","listening","type","value","roundButton","App","state","uploadStatus","dumpStatus","clearStatus","showUpload","showDump","showClear","handleSubmitListen","bind","handleSubmitUpload","handleSubmitDump","handleSubmitClear","event","this","fetch","method","then","setState","catch","error","console","log","preventDefault","response","text","alert","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.d17ae078.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\n\nfunction button(props) {\n\tif (props.show){\n\t return(\n\t\t <form className=\"formWrap flat\" onSubmit={props.submit}>\n\t\t <input \n\t\t\t className=\"btn flat\" \n\t\t\t id={props.listening? \"listening\" : null} \n\t\t\t type=\"submit\" \n\t\t\t value={props.value}\n\t\t />\n\t  </form> )\n\t} else {\n\treturn \tnull;\n\t}\n}\n\t\n\n\n\nexport default button;\n\n\n","import React from 'react';\n\n\nconst roundButton =  (props) => (\n\t<form className=\"formWrap\" onSubmit={props.submit}>\n\t\t <input \n\t\t\tclassName=\"btn round\" \n\t\t\tid={props.listening} \n\t\t\ttype=\"submit\" \n\t\t\tvalue={props.listening}\n\t\t  />\n\t  </form> \n)\n\nexport default roundButton;\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport heading from './components/heading/heading';\nimport Button from './components/buttons/button';\nimport RoundButton from './components/buttons/roundButton';\n\n\nclass App extends React.Component {\nconstructor() {\n    super();\n    this.state = {\n\t\tlistening: \"Listen\",\n\t\tuploadStatus: \"Upload\",\n\t\tdumpStatus: \"Dump\",\n\t\tclearStatus: \"Clear\", \n\n\t\tshowUpload: false,\n\t\tshowDump: false,\n\t\tshowClear: false\n\n\n    };\n\n\tthis.handleSubmitListen = this.handleSubmitListen.bind(this);\n\tthis.handleSubmitUpload = this.handleSubmitUpload.bind(this);\n\tthis.handleSubmitDump = this.handleSubmitDump.bind(this);\n\tthis.handleSubmitClear = this.handleSubmitClear.bind(this);\n  }\n\n\n\n\n handleSubmitListen(event) {\n\tlet requestOptions = {\n\t  method: 'GET',\n\t};\n\n\tlet url=\"./api/toggleListen\" \n\tlet value;\n\tif (this.state.listening === \"Listening\") {\n\t\tvalue = \"Stopped\";\n\n\t } else if  (this.state.listening === \"Stopped\") {\n\t\t value = \"Listening\";\n\n\t } else {\n\t\t value = \"Listening\";\n\t }\n\tfetch(url, requestOptions)\n\t.then(() => this.setState({\n\t\t \"listening\" : value, // Listenning status = Listenning / Stoped Listenning\n\t }))\n\t .then(() => {\n\t\t\tif (this.state.listening === \"Stopped\") {\n\t\t\t\t this.setState({\n\t\t\t\t\t\"showUpload\" : true,\n\t\t\t\t })\n\t\t\t } else {\n\t\t\t\tthis.setState({\n\t\t\t\t\t\"showUpload\" : false,\n\t\t\t\t\t\"showDump\": false,\n\t\t\t\t\t\"showClear\": false,\n\t\t\t\t })\n\t\t }\n\t })\n\n\t .catch(error => console.log('error', error));\n\t \n\tevent.preventDefault();\n  }\n\nhandleSubmitUpload(event) {\n\tlet requestOptions = {\n\t  method: 'GET',\n\t};\n\t\n\tlet url=\"/api/upload\" \n\tthis.setState({\"uploadStatus\" : \"Uploading\"});\n\tfetch(url, requestOptions)\n\t  .then(response => response.text())\n\t  .then(() => \t this.setState({\n\t\t  \"uploadStatus\" : \"Uploaded\",\n\t\t  \"showDump\": true\n\t }))\n\t  .catch(error => alert('error', error));\n\tevent.preventDefault();\n  }\n\n\n\nhandleSubmitDump(event) {\n\tlet requestOptions = {\n\t  method: 'GET',\n\t};\n\t\n\tlet url=\"/api/dump\" \n\tthis.setState({\"dumpStatus\" : \"Dumping\"});\n\tfetch(url, requestOptions)\n\t  .then(response => response.text())\n\t  .then(() => \t this.setState({\n\t\t  \"dumpStatus\" : \"Dumped\",\n\t\t  \"showClear\": true\n\t }))\n\t  .catch(error => alert('error', error));\n\tevent.preventDefault();\n  }\n\n\n handleSubmitClear(event) {\n\tlet requestOptions = {\n\t  method: 'GET',\n\t};\n\t\n\tlet url=\"/api/clear\" \n\tthis.setState({\"clearStatus\" : \"Cleaning\"});\n\tfetch(url, requestOptions)\n\t  .then(response => response.text())\n\t  .then(() => \t this.setState({\n\t\t  \"clearStatus\" : \"Cleaned\"\n\t }))\n\t  .catch(error => alert('error', error));\n\tevent.preventDefault();\n  }\n\n\n\n    render() { \n\t\tconsole.log(this.state.showUpload);\n\t\treturn(\n\t\t\t<div id=\"wrapper\">\n\t\t\t\t<div className=\"formWrap\">\n\t\t\t\t\t<RoundButton \n\t\t\t\t\t\tlistening={this.state.listening} \n\t\t\t\t\t\tsubmit={this.handleSubmitListen}\n\t\t\t\t\t/>\n\t\t\t\t\t<Button \n\t\t\t\t\t\tlistening={this.state.listening} \n\t\t\t\t\t\tsubmit={this.handleSubmitUpload} \n\t\t\t\t\t\tvalue={this.state.uploadStatus} \n\t\t\t\t\t\tshow={this.state.showUpload}\t\n\t\t\t\t\t/>\n\n\t\t\t\t  \n\t\t\t\t\t<Button \n\t\t\t\t\t\tlistening={this.state.listening} \n\t\t\t\t\t\tsubmit={this.handleSubmitDump} \n\t\t\t\t\t\tvalue={this.state.dumpStatus} \n\t\t\t\t\t\tshow={this.state.showDump}\t\n\t\t\t\t\t/>\n\t\t\t\t\t<Button \n\t\t\t\t\t\tlistening={this.state.listening} \n\t\t\t\t\t\tsubmit={this.handleSubmitClear} \n\t\t\t\t\t\tvalue={this.state.clearStatus} \n\t\t\t\t\t\tshow={this.state.showClear}\n\t\t\t\t\t/>\n\n\t\t\t\t</div>\n\t\t\t</div>\n\t);\n\n  }\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}