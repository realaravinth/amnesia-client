{"version":3,"sources":["logo.svg","components/heading/heading.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","heading","App","state","listening","showUpload","uploadStatus","handleSubmitUpload","bind","handleSubmitListen","event","this","setState","fetch","method","then","response","text","catch","error","alert","preventDefault","value","console","log","className","onSubmit","id","type","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"0IAAAA,EAAOC,QAAU,IAA0B,kC,iJCS5BC,ICkFAC,E,kDAtFf,aAAe,IAAD,8BACV,gBACKC,MAAQ,CACfC,UAAW,SACXC,YAAY,EACZC,aAAc,UAIf,EAAKC,mBAAqB,EAAKA,mBAAmBC,KAAxB,gBAC1B,EAAKC,mBAAqB,EAAKA,mBAAmBD,KAAxB,gBAVb,E,+DAYME,GAAQ,IAAD,OAM1BC,KAAKC,SAAS,CAAC,aAAiB,cAChCC,MAFQ,cAJa,CACnBC,OAAQ,QAMPC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,kBAAQ,EAAKH,SAAS,CAC3B,aAAiB,gBAEjBM,OAAM,SAAAC,GAAK,OAAIC,MAAM,QAASD,MACjCT,EAAMW,mB,yCAIaX,GAAQ,IAMtBY,EANqB,OAQxBA,EAD4B,cAAzBX,KAAKR,MAAMC,UACN,qBAEA,YAGVS,MARQ,qBAJa,CACnBC,OAAQ,QAYPC,MAAK,kBAAQ,EAAKH,SAAS,CAC5B,UAAcU,EACb,YAAc,OAGdJ,OAAM,SAAAC,GAAK,OAAII,QAAQC,IAAI,QAASL,MACvCT,EAAMW,mB,+BAGN,OAAIV,KAAKR,MAAME,WACP,yBAAKoB,UAAU,YACrB,kCACC,0BAAMA,UAAU,WAAWC,SAAUf,KAAKF,oBAC3C,yBAAKgB,UAAU,aACb,2BAAOA,UAAU,MAAME,GAAIhB,KAAKR,MAAMC,UAAWwB,KAAK,SAASN,MAAOX,KAAKR,MAAMC,cAIlF,0BAAMqB,UAAU,WAAWC,SAAUf,KAAKJ,oBAE3C,yBAAKkB,UAAU,aACb,2BAAOA,UAAU,MAAME,GAAIhB,KAAKR,MAAMC,UAAW,YAAc,KAAMwB,KAAK,SAASN,MAAOX,KAAKR,MAAMG,kBAMhG,6BACP,kCACC,yBAAKmB,UAAU,YACf,0BAAMA,UAAU,WAAWC,SAAUf,KAAKF,oBAC3C,yBAAKgB,UAAU,aACb,2BAAOA,UAAU,MAAME,GAAIhB,KAAKR,MAAMC,UAAWwB,KAAK,SAASN,MAAOX,KAAKR,MAAMC,oB,GA5EpEyB,IAAMC,WCQJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5B,MAAK,SAAA6B,GACJA,EAAaC,gBAEd3B,OAAM,SAAAC,GACLI,QAAQJ,MAAMA,EAAM2B,c","file":"static/js/main.a3487c7f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'; \nfunction heading() {\n\treturn(\n\t\t<h1>\n\t\tAmnesia\n\t\t</h1>\n\t)\n}\n\nexport default heading;\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport heading from './components/heading/heading';\nclass App extends React.Component {\nconstructor() {\n    super();\n    this.state = {\n\t\tlistening: \"Listen\",\n\t\tshowUpload: false,\n\t\tuploadStatus: \"Upload\"\n    };\n\n\n\tthis.handleSubmitUpload = this.handleSubmitUpload.bind(this)\n\tthis.handleSubmitListen = this.handleSubmitListen.bind(this);\n  }\n handleSubmitUpload(event) {\n\tlet requestOptions = {\n\t  method: 'GET',\n\t};\n\t\n\tlet url=\"/api/upload\" \n\tthis.setState({\"uploadStatus\" : \"Uploading\"});\n\tfetch(url, requestOptions)\n\t  .then(response => response.text())\n\t  .then(() => \t this.setState({\n\t\t  \"uploadStatus\" : \"Uploaded\"\n\t }))\n\t  .catch(error => alert('error', error));\n\tevent.preventDefault();\n  }\n\n\n handleSubmitListen(event) {\n\tlet requestOptions = {\n\t  method: 'GET',\n\t};\n\t\n\tlet url=\"./api/toggleListen\" \n\t let value;\n\t if (this.state.listening === \"Listening\") {\n\t\t\tvalue = \"Stopped Listenning\"\n\t } else {\n\t\t value = \"Listening\"\n\t }\n\n\tfetch(url, requestOptions)\n\t  .then(() => \t this.setState({\n\t\t \"listening\" : value, // Listenning status = Listenning / Stoped Listenning\n\t\t  \"showUpload\": true,\n\t }))\n\n\t  .catch(error => console.log('error', error));\n\tevent.preventDefault();\n  }\n    render() { \n\tif (this.state.showUpload) {\n\t\treturn(<div className=\"formWrap\">\n\t\t\t<heading/>\n\t\t  <form className=\"formWrap\" onSubmit={this.handleSubmitListen}>\n\t\t\t<div className=\"formGroup\">\n\t\t\t\t <input className=\"btn\" id={this.state.listening} type=\"submit\" value={this.state.listening} />\n\t\t\t</div>\n\t\t  </form> \n\n\t\t  <form className=\"formWrap\" onSubmit={this.handleSubmitUpload}>\n\n\t\t\t<div className=\"formGroup\">\n\t\t\t\t <input className=\"btn\" id={this.state.listening? \"listening\" : null} type=\"submit\" value={this.state.uploadStatus} />\n\t\t\t</div>\n\t\t  </form> \n\t</div>\n\t);\n\t} else {\n\t\treturn( <div>\n\t\t\t<heading/>\n\t\t\t\t<div className=\"formWrap\">\n\t\t  <form className=\"formWrap\" onSubmit={this.handleSubmitListen}>\n\t\t\t<div className=\"formGroup\">\n\t\t\t\t <input className=\"btn\" id={this.state.listening} type=\"submit\" value={this.state.listening} />\n\t\t\t</div>\n\t\t  </form>\n\t\t\t</div>\n\t\t</div>\n\t\t);\n\t}\n  }\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}